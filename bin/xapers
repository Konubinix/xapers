#!/usr/bin/env python

import os
import sys
import xapers

########################################################################

# combine a list of terms with spaces between, so that simple queries
# don't have to be quoted at the shell level.
def make_query_string(terms, require=True):
    string = str.join(' ', terms)
    if string == '':
        if require:
            print >>sys.stderr, "Must specify a search term."
            sys.exit()
        else:
            string = '*'
    return string

########################################################################

def usage():
    prog = os.path.basename(sys.argv[0])
    print "Usage:", prog, "<command> [args...]"
    print """
Commands:

  import [options] [[id:]<docid>      Import new document or update existing.
    --source=<source>                   source for bib data
    --file=<file>                       file to index
    --tags=<tag>[,...]                  initial tags
    --prompt                            prompt for unspecified options
    --view                              view entry after adding
  delete [id:]<docid>                 Delete a document from database.

  tag +<tag>|-<tag> [...] [--] <search-terms>...
                                      Add/remove tags.

  search [options] <search-terms>...  Search for documents.
    --output=[summary|bibtex|files|sources|tags]
                                        output format (default is 'summary')
    --limit=N                           limit number of results returned
                                        (default is 20, 0 for all)
  bibtex <search-terms>...            Short for \"search --output=bibtex\".
  view <search-terms>...              View search in curses UI.
  count <search-terms>...             Count matches.

  export <dir> <search-terms>...      Export documents to a directory of
                                      files named for document titles.

  sources                             List available sources.
  source2bib <source>                 Retrieve bibtex for source and
                                      print to stdout.
  scandoc <file>                      Scan a file for source IDs.

  version                             Print version number.
  help                                This help.

The xapers document store is specified in the XAPERS_DIR environment
variable, or defaults to '~/.xapers/docs' if not specified (the
directory is allowed to be a symlink).

Other definitions:

  <docid>: Documents are assigned unique integer IDs.

  <source>: Sources can be either URLs, 'source:sid' strings, or
    bibtex files.  URLs and source:id strings will be parsed by the
    source module to determine online sources to for downloading
    bibtex.  The currently recognized source:sids are:
      doi:<Digital Object Id>
      arxiv:<arXiv Article Id>
      ads:<SAO/NASA Astrophysics Data System Id>
      dcc:<LIGO Document Control Center Id>

  <search-terms>: The following prefixes are used to match against
    specific elements of a document:
      id:<docid>               document id
      author:<string>          string in authors (also a:)
      title:<string>           string in title (also t:)
      tag:<tag>                user tags
      source:<source>          source type (also s:)

  The string '*' will match all messages."""

########################################################################

if __name__ == '__main__':

    if len(sys.argv) > 1:
        cmd = sys.argv[1]
    else:
        cmd = []

    xdir = os.getenv('XAPERS_DIR',
                     os.path.expanduser(os.path.join('~','.xapers','docs')))

    ########################################
    if cmd in ['add','a','import','i','update','u']:
        cli = xapers.cli.UI(xdir)

        tags = None
        infile = None
        source = None
        prompt = False
        view = False
        docid = None

        argc = 2
        while True:
            if argc >= len(sys.argv):
                break
            elif '--source=' in sys.argv[argc]:
                source = sys.argv[argc].split('=',1)[1]
            elif '--file=' in sys.argv[argc]:
                infile = sys.argv[argc].split('=',1)[1]
            elif '--tags=' in sys.argv[argc]:
                tags = sys.argv[argc].split('=',1)[1].split(',')
            elif '--prompt' in sys.argv[argc]:
                prompt = True
            elif '--view' in sys.argv[argc]:
                view = True
            else:
                break
            argc += 1

        if argc == (len(sys.argv) - 1):
            docid = sys.argv[argc]

        docid = cli.add(docid, infile=infile, source=source, tags=tags, prompt=prompt)

        # dereference the cli object so that the database is flushed
        # FIXME: is there a better way to handle this?
        cli = None

        if view and docid:
            xapers.nci.UI(xdir, cmd=['search', 'id:'+docid])

    ########################################
    elif cmd in ['update-all']:
        cli = xapers.cli.UI(xdir)
        cli.update_all()

    ########################################
    elif cmd in ['delete']:
        cli = xapers.cli.UI(xdir)
        cli.delete(make_query_string(sys.argv[2:]))

    ########################################
    elif cmd in ['search','s']:
        cli = xapers.cli.UI(xdir)

        oformat = 'summary'
        limit = 20

        argc = 2
        while True:
            if argc >= len(sys.argv):
                break
            if '--output=' in sys.argv[argc]:
                oformat = sys.argv[argc].split('=')[1]
            elif '--limit=' in sys.argv[argc]:
                limit = int(sys.argv[argc].split('=')[1])
            else:
                break
            argc += 1

        query = make_query_string(sys.argv[argc:])
        try:
            cli.search(query, oformat=oformat, limit=limit)
        except KeyboardInterrupt:
            sys.exit()

    ########################################
    elif cmd in ['bibtex','bib','b']:
        cli = xapers.cli.UI(xdir)
        argc = 2
        query = make_query_string(sys.argv[argc:])
        try:
            cli.search(query, oformat='bibtex')
        except KeyboardInterrupt:
            sys.exit()

    ########################################
    elif cmd in ['view','v','show','select']:
        query = make_query_string(sys.argv[2:], require=False)
        try:
            xapers.nci.UI(xdir, cmd=['search', query])
        except KeyboardInterrupt:
            sys.exit()

    ########################################
    elif cmd in ['nci']:
        try:
            xapers.nci.UI(xdir, cmd=sys.argv[2:])
        except KeyboardInterrupt:
            sys.exit()

    ########################################
    elif cmd in ['tag','t']:
        cli = xapers.cli.UI(xdir)

        add_tags = []
        remove_tags = []

        argc = 2
        for arg in sys.argv[argc:]:
            if argc >= len(sys.argv):
                break
            if arg == '--':
                argc += 1
                continue
            if arg[0] == '+':
                add_tags.append(arg[1:])
            elif arg[0] == '-':
                remove_tags.append(arg[1:])
            else:
                break
            argc += 1

        query = make_query_string(sys.argv[argc:])
        cli.tag(query, add_tags, remove_tags)

    ########################################
    elif cmd in ['dumpterms']:
        cli = xapers.cli.UI(xdir)
        query = make_query_string(sys.argv[2:], require=False)
        cli.dumpterms(query)

    ########################################
    elif cmd in ['count']:
        cli = xapers.cli.UI(xdir)
        query = make_query_string(sys.argv[2:], require=False)
        cli.count(query)

    ########################################
    elif cmd in ['export']:
        cli = xapers.cli.UI(xdir)
        outdir = sys.argv[2]
        query = make_query_string(sys.argv[3:])
        cli.export(outdir, query)

    ########################################
    elif cmd in ['sources']:
        import xapers.source
        for source in xapers.source.list_sources():
            print source

    ########################################
    elif cmd in ['source2bib','s2b']:
        string = sys.argv[2]
        import xapers.source
        bibtex, url = xapers.source.fetch_bibtex(string)
        if url:
            print >>sys.stderr, url
        try:
            print xapers.bibtex.Bibentry(bibtex).as_string()
        except:
            raise
            print >>sys.stderr, "Problem parsing bibtex.  Outputting raw bibtex..."
            print bibtex

    ########################################
    elif cmd in ['scandoc','sd']:
        infile = sys.argv[2]
        import xapers.source
        sources = xapers.source.scan_for_sources(infile)
        for ss in sources:
            print "%s" % (ss)

    ########################################
    elif cmd in ['version']:
        print "Ha!"

    ########################################
    elif cmd in ['help','h']:
        usage()
        sys.exit(0)

    ########################################
    else:
        print >>sys.stderr, "unknown sub command '%s'." % cmd
        usage()
        sys.exit(1)
